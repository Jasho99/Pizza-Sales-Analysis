/* QUESTIONS BASE ON WINDOWS FUNCTIONS :- Hard-Level-2 Question.

Compute a 7-day moving average of total revenue for each pizza category.

Find pizzas that were consistently in the top 3 sellers for the last 5 consecutive weeks.*/

-- Q.1 Find the first date each pizza crossed ₹10,000 in cumulative sales.
SELECT *, MIN(Y.ORDER_DATE) AS FIRST_10K_DATE
FROM
(SELECT *,
SUM(X.REV) OVER(PARTITION BY X.PIZZA_NAME ORDER BY ORDER_DATE) AS CONSECUTIVE
FROM
(SELECT PIZZA_NAME,ORDER_DATE, SUM(TOTAL_PRICE) AS REV
FROM PIZZA_ORDERS
GROUP BY 1,2) AS X) AS Y
WHERE Y.CONSECUTIVE >= 10000
GROUP BY Y.PIZZA_NAME;

-- Q2. Identify months where total revenue dropped compared to the previous month.
SELECT Y.MONTH_NAME
FROM
(SELECT
*,
CASE WHEN X.PREV_MONTH > X.CURRENT_MONTH THEN 'Sales less than previous month' ELSE 'Slaes Okay' END AS COMPARISON
FROM (SELECT 
MONTHNAME(ORDER_DATE) AS MONTH_NAME, SUM(TOTAL_PRICE) AS CURRENT_MONTH,
LAG(SUM(TOTAL_PRICE)) OVER(ORDER BY MONTH(ORDER_DATE)) AS PREV_MONTH
FROM PIZZA_ORDERS
GROUP BY 1) AS X) AS Y
WHERE COMPARISON = 'Sales less than previous month';

-- Q3. Determine pizzas that ranked 1st in revenue for at least 3 consecutive days.
WITH RANKING AS 
(SELECT * FROM
(SELECT PIZZA_NAME,ORDER_DATE, SUM(TOTAL_PRICE) AS REV
FROM PIZZA_ORDERS
GROUP BY 1,2) AS DATE_WISE_SALES) ,
RANKED AS (SELECT *,
DENSE_RANK() OVER(PARTITION BY ORDER_DATE ORDER BY REV DESC) AS RN FROM RANKING),
TOP_PIZZA AS (SELECT * FROM RANKED
WHERE RN = 1),
STREAKS AS (SELECT PIZZA_NAME,ORDER_DATE,
LAG(ORDER_DATE) OVER(PARTITION BY PIZZA_NAME ORDER BY ORDER_DATE) AS PEV_DATE
FROM TOP_PIZZA),
FLAGGED AS (SELECT *,
CASE WHEN DATEDIFF(ORDER_DATE,PEV_DATE) = 1 THEN 0
		ELSE 1 END AS BREAK_FLAG
FROM STREAKS),
GROUPED AS (SELECT *,
SUM(BREAK_FLAG) OVER(PARTITION BY PIZZA_NAME ORDER BY ORDER_DATE) AS STREAK_GROUP 
FROM FLAGGED)
SELECT *,
MIN(ORDER_DATE) AS FIRST_DATE,
MAX(ORDER_DATE) AS LAST_DATE,
COUNT(*) AS CONSECUTIVE_DATE
FROM GROUPED
GROUP BY PIZZA_NAME, STREAK_GROUP
HAVING COUNT(*) >= 3;

-- Q4. For each pizza, find the maximum single-day revenue jump compared to the previous day.
WITH 
	DATE_WISE_REV AS
		(SELECT 
			PIZZA_NAME, 
			ORDER_DATE,
			SUM(TOTAL_PRICE) AS REV
		FROM PIZZA_ORDERS
		GROUP BY 1,2),
    REV_JUMP AS
		(SELECT *,
				LAG(REV) OVER(PARTITION BY PIZZA_NAME ORDER BY ORDER_DATE) AS PREV_REV
		 FROM DATE_WISE_REV),
	RANKED AS    
		(SELECT *,
		   REV - PREV_REV AS JUMP
		 FROM REV_JUMP),
	MAX_JUMP AS
		(SELECT *,
				ROW_NUMBER() OVER(PARTITION BY PIZZA_NAME ORDER BY JUMP DESC) AS RN
        FROM RANKED)
	 SELECT PIZZA_NAME,
			ORDER_DATE,
			JUMP
	 FROM MAX_JUMP
     WHERE RN = 1;

-- Q5. Identify the pizza that appeared as the top seller most frequently across all dates.
WITH TOP_SELLER AS
(SELECT PIZZA_NAME, ORDER_DATE, SUM(TOTAL_PRICE) AS REV
FROM PIZZA_ORDERS
GROUP BY 1,2),
RANKED AS (SELECT *,
ROW_NUMBER() OVER(PARTITION BY ORDER_DATE ORDER BY REV DESC) AS RN
FROM TOP_SELLER),
FREQUENT AS (SELECT * FROM RANKED
WHERE RN = 1)
SELECT PIZZA_NAME,
COUNT(*) AS FREQUENCY
FROM FREQUENT
GROUP BY PIZZA_NAME
ORDER BY FREQUENCY DESC;

-- Q6. Calculate the difference between each day’s total revenue and the average daily revenue for that month.
WITH 
DAILY_REV AS
	(SELECT
		ORDER_DATE,
		SUM(TOTAL_PRICE) AS DAILY_TOTAL
	 FROM PIZZA_ORDERS
	 GROUP BY 1),
MONTHLY_AVG AS
	(SELECT *,
	    	ROUND(AVG(DAILY_TOTAL) OVER(PARTITION BY YEAR(ORDER_DATE), MONTH(ORDER_DATE)),2) AS MONTHLY_AVG_REV
	 FROM DAILY_REV)
SELECT *,
	(DAILY_TOTAL - MONTHLY_AVG_REV) AS DIFFERENCE
FROM MONTHLY_AVG;

-- Q6. Rank pizza categories by month-over-month revenue growth rate.
SELECT * FROM
	(SELECT *,
		LAG(REV) OVER(PARTITION BY PIZZA_CATEGORY ORDER BY MONTH_NUM) AS MONTHLY_GROWTH
	 FROM
		(SELECT PIZZA_CATEGORY,
				MONTH(ORDER_DATE) AS MONTH_NUM,
				MONTHNAME(ORDER_DATE) AS MONTH_NAME,
				SUM(TOTAL_PRICE) AS REV
		FROM PIZZA_ORDERS
		GROUP BY 1,2) AS MONTHLY_REV) AS GROWTH_MONTH